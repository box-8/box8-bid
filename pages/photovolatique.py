from datetime import datetime
from io import BytesIO
import json
import os
from typing import List
from crewai import Agent, Crew, Process, Task
from docx import Document
import streamlit as st 
import tempfile
from crewai_tools import PDFSearchTool
from box8.Session import *
from box8.Agents import Commercial, Consultant, RagAgent
from box8.Functions import extraire_tableau_json, DocumentWriter






def saveDoJson(data, name):
    # Cr√©er un document Word
    doc = Document()
    
    # Ajouter le titre principal
    doc.add_heading(data['nom_equipement'], level=1)
    
    # Ajouter la synth√®se
    doc.add_paragraph('Synth√®se :')
    doc.add_paragraph(data['synthese'])

    # Ajouter les composants et leurs t√¢ches de mise en service
    for composant in data['composants']:
        # Ajouter le nom du composant
        doc.add_heading(composant['nom_composant'], level=2)
        
        # Ajouter les t√¢ches de mise en service, s'il y en a
        if composant['mise_en_service']:
            for tache in composant['mise_en_service']:
                # Ajouter le nom de la t√¢che
                doc.add_heading(tache["nom_tache"], level=3)
                # Ajouter la description de la t√¢che
                doc.add_paragraph(tache["description_tache"])
        else:
            # Si aucune mise en service n'est pr√©sente, indiquer "Aucune t√¢che de mise en service"
            doc.add_paragraph("Aucune t√¢che de mise en service disponible.")
    
    # V√©rifier et cr√©er le dossier "uploads" s'il n'existe pas
    if not os.path.exists("uploads"):
        os.makedirs("uploads")
    
    # G√©n√©rer un nom de fichier unique avec un timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    file_path = os.path.join("uploads", f"{name}-mes-{timestamp}.docx")

    # Sauvegarder le document
    doc.save(file_path)
    
    print(f"Le document a √©t√© sauvegard√© sous : {file_path}")








def doJson(backstory, uploaded_file):

    # Read the file and prepare the data for PDFSearchTool
    # PDF Search Tool setup
    # doc = DocumentWriter()
    
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as f:
        f.write(uploaded_file.read())
    uploaded_file_path = f.name
    pdf_tool = PDFSearchTool(pdf=uploaded_file_path)
    
    # Cr√©ation des agents
    agent_tech_genlecture = Agent(
        role="Ing√©nieur D√©veloppement projets photovoltaique",
        goal="""
        Synth√©tiser l'appel d'ofre pour le champs photovolatique pour permettre son chiffrage.""",
        verbose=True,
        memory=True,
        backstory="""
        Ing√©nieur en g√©nie √©lectrique et √©nergies renouvellables, vous avez une grande expertise dans le montage de dossiers r√©ponse 
        aux d'appels d'offre de la Commission de R√©gulation de l'Energie 
        """,
        max_iter=5,
        tools=[pdf_tool],
        llm = ChooseLLM()
    )
    agent_tech_genlecturetask = Task(
        description="Lire l'appel d'offre et synth√©tiser son contenu pour le bureau d'√©tudes.",
        expected_output="""
        Un objet JSON bien format√© contenant les informations extraites du document : 
        {{
            "objet_appel_offre":"contexte du dossier d'appel d'offre",
            "Examen_des_offres":"r√©sum√© de la proc√©dure d'examen",
            "Admissibilit√©":"r√©sum√© des condictions d'admissibilit√© des candidats",
            "Notation":"r√©sum√© des crit√®res de notation des offres",
            "R√©mun√©ration":"r√©sum√© de la r√©mun√©ration",
            "taches":[tableau vide]
        }}
        """,
        agent=agent_tech_genlecture,
    )
    
    # Cr√©ation des agents
    agent_tech_lecture = Agent(
        role="Ing√©nieur Etudes",
        goal="""
        Identifier les t√¢ches qui devront √™tre incluses dans le processus de construction (√©tudes compl√©mentaires, plans, terrassements, fondations, structures, r√©seaux enterr√©s, panneaux, c√¢blage, boitiers de raccordement, 
onduleurs, postes transformation, instrumentation de mesure, instrumentation de r√©gulation, cl√¥tures...).""",
        verbose=True,
        memory=True,
        backstory=backstory,
        max_iter=5,
        tools=[pdf_tool],
        llm = ChooseLLM()
    )
    agent_tech_lecturetask = Task(
        description="Ajouter une liste des taches au format JSON",
        expected_output="""
        Un objet JSON bien format√© avec l'intitul√© du type d'√©quipement d√©crivant les composants et groupes 
        fonctionnels, organis√©e dans l'ordre de leur mise en service. Le format de retour est le suivant : 
        [
                {{
                    "construction_task":"t√¢che de construction (√©tudes compl√©mentaires, plans, terrassements, fondations, structures, r√©seaux enterr√©s, panneaux, c√¢blage, boitiers de raccordement, 
onduleurs, postes transformation, instrumentation de mesure, instrumentation de r√©gulation, cl√¥tures)",
                    "prix":"estimation de prix pour la t√¢che"
                }}
                ...
        ] """,
        agent=agent_tech_lecture,
    )
    crew = Crew(
        agents=[agent_tech_genlecture,agent_tech_lecture],
        tasks=[agent_tech_genlecturetask, agent_tech_lecturetask],
        process=Process.sequential  # Ex√©cution s√©quentielle des t√¢ches
    )   
    
    part1 = "Etude de l'AO CRE"
    st.subheader(part1)
    result = crew.kickoff()

    data = json.loads(result.raw)
    
    st.write(data)
    # st.write(f"analyse {eq}")
    return data, f.name
    
    st.subheader("Proc√©dure d√©taill√©e")
    
    backstory=f"""
        Vous avez une grande exp√©rience dans la mise en service de syst√®mes 
        industriels (chaleur, p√©trochimie, pompage, √©nergie, transport, industrie manufacturi√®re).
        Vous mettez en service un {data["nom_equipement"]}. {data["synthese"]}
        """
    st.success(backstory)
    if True:
        for composant in data["composants"]:
            # element = composant["nom_composant"]
            # st.write(element)
            commission(backstory, composant)
    
    return data, f.name
    


st.set_page_config(page_title="Analyse de fiche technique", page_icon="ü§ñ", layout="wide") 
init_session()
st.header("Photovoltaique")

backstory_default="""Ing√©nieur d√©veloppement de projets photovoltaiques vous avez une grande expertise dans l'analyse des cahier des charges CRE 
et faites appel √† votre bureau d'√©tudes pour pour chiffrer la construction des champs PV de l'appel d'offre."""

backstory = st.text_area("but de l'analyse",backstory_default)


uploaded_file_mes = st.file_uploader("Upload technical document", type="pdf")
if st.button("Analyse de la fiche technique"):
    
    # Streamlit file uploader for PDF
    
    if uploaded_file_mes :
        
        data, name = doJson(backstory, uploaded_file_mes)
        # Chemin relatif vers le r√©pertoire 'uploads'
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        path = os.path.join('uploads', f'fichier-cre-{timestamp}.json')

        # V√©rifier si le r√©pertoire 'uploads' existe, sinon le cr√©er
        if not os.path.exists('uploads'):
            os.makedirs('uploads')

        # Sauvegarder les donn√©es dans un fichier JSON dans le r√©pertoire 'uploads'
        with open(path, 'w') as fichier:
            json.dump(data, fichier, indent=4, ensure_ascii=False)
    
