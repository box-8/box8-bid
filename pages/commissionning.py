from io import BytesIO
import os
from typing import List
from crewai import Agent, Crew, Process, Task
import streamlit as st 
import tempfile
from crewai_tools import PDFSearchTool
from box8.Session import *
from box8.Agents import Commercial, Consultant, RagAgent
from box8.Functions import toast, extraire_tableau_json, DocumentWriter

 
def do(uploaded_file):
    
        # Read the file and prepare the data for PDFSearchTool
        # PDF Search Tool setup
        doc = DocumentWriter()
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as f:
            f.write(uploaded_file.read())
        uploaded_file_path = f.name
        pdf_tool = PDFSearchTool(pdf=uploaded_file_path)
        
        # Cr√©ation des agents
        agent_tech_genlecture = Agent(
            role="Expert Technique Ing√©ni√©rie",
            goal="""
            Synth√©tiser la fiche technique de l'√©quipement.""",
            verbose=True,
            memory=True,
            backstory="""
            Ing√©nieur en g√©nie √©lectrom√©canique et g√©nie des proc√©d√©s, vous avez une grande expertise dans l'analyse de 
            syst√®mes techniques complexes et faites appel √† vos comp√©tences de synth√®se technique.
            """,
            max_iter=5,
            tools=[pdf_tool],
            llm = ChooseLLM()
        )
        agent_tech_genlecturetask = Task(
            description="Lire la documentation technique et synth√©tiser son contenu.",
            expected_output="""
            Un descriptif synth√©tique de la fiche d'√©quipements.""",
            agent=agent_tech_genlecture,
        )
        
        # Cr√©ation des agents
        agent_tech_lecture = Agent(
            role="Expert Technique Ing√©ni√©rie",
            goal="""
            Identifier les composants techniques qui devront √™tre inclus dans le processus de mise en service (commissionning) 
            d'apr√©s la fiche technique.
            Si la fiche technique n'indique pas de sous-√©quipements faites appel √† vos connaissances 
            pour d√©terminer une d√©composition en sous √©quipements.""",
            verbose=True,
            memory=True,
            backstory="""
            Ing√©nieur en g√©nie √©lectrom√©canique et g√©nie des proc√©d√©s, vous avez une grande expertise dans l'analyse de 
            syst√®mes techniques complexes et faites appel √† vos connaissances pour d√©terminer 
            la composition d'un √©quipement en vue de sa mise en service (√©lectricit√©, 
            instrumentation de mesure, instrumentation de r√©gulation, organes m√©caniques ...).
            """,
            max_iter=5,
            tools=[pdf_tool],
            llm = ChooseLLM()
        )
        agent_tech_lecturetask = Task(
            description="Lire la documentation technique et d√©terminer la composition de l'√©quipement.",
            expected_output="""
            Une liste avec l'intitul√© du type d'√©quipement d√©crivant les composants et groupes 
            fonctionnels, organis√©e dans l'ordre de leur mise en service.""",
            agent=agent_tech_lecture,
        )
        
        
        crew = Crew(
            agents=[agent_tech_genlecture,agent_tech_lecture],
            tasks=[agent_tech_genlecturetask, agent_tech_lecturetask],
            process=Process.sequential  # Ex√©cution s√©quentielle des t√¢ches
        )
        
        part1 = "Groupes fonctionnels / √©quipements"
        st.subheader(part1)
        result = crew.kickoff()
        st.write(result.raw)
        
        doc.Chapter(part1)
        doc.writeBlack(result.raw)
        
        
        commissionning_agent = Agent(
            role="Ing√©nieur Mise en Service Commissionning",
            goal=f"""
            R√©diger une proc√©dure de mise en service d√©taill√©e de l'√©quipement sachant qu'il comporte les √©l√©ments suivants :
            {result.raw} 
            D√©tailler des essais de contr√¥le de mise en service et de performance pour chacun d'eux
            """,
            verbose=True,
            memory=True,
            backstory="""
            Vous avez une grande exp√©rience dans la mise en service de syst√®mes 
            industriels (chaleur, p√©trochimie, pompage, √©nergie, transport, industrie manufacturi√®re).
            """,
            max_iter=5,
            llm = ChooseLLM()
        )
        
        commissionning_agenttask = Task(
            description="Pour chaque composant de la liste d√©crire les t√¢ches et actions √† r√©aliser pour sa mise en service.",
            expected_output="""
            Une proc√©dure de mise en service avec des instructions pr√©cises pour la mise en service. 
            """,
            agent=commissionning_agent,
            async_execution=False,  # S'ex√©cute s√©quentiellement
        )
        crew = Crew(
            agents=[commissionning_agent],
            tasks=[commissionning_agenttask],
            process=Process.sequential  # Ex√©cution s√©quentielle des t√¢ches
        )
        
        part2 = "Mise en service / √©quipements"
        st.subheader(part2)
        result = crew.kickoff()
        st.write(result.raw)
        
        doc.Chapter(part2)
        doc.writeBlack(result.raw)
        
        
        redactor_agent = Agent(
            role="Technicien de Mise en Service",
            goal=f"""
            A partir de la liste ci apr√©s, d√©crire t√¢che par t√¢che le d√©tail de la proc√©dure de mise en service.
            Proposer des essais de performance pour chacun d'eux :
            {result.raw} 
            
            """,
            verbose=True,
            memory=True,
            backstory="""
            Vous avez une grande exp√©rience dans la mise en service de syst√®mes 
            industriels (chaleur, p√©trochimie, pompage, √©nergie, transport, industrie manufacturi√®re).
            Vous entrez dans le d√©tail des proc√©dures de mise en service
            """,
            max_iter=5,
            llm = ChooseLLM()
        )
        
        redactor_agenttask = Task(
            description="""
            Pour chaque composant de la liste d√©crire les t√¢ches et actions √† r√©aliser 
            pour sa mise en service du point de vue technique, de la s√©curit√©, de la qualit√© et des objectifs de performance.
            """,
            expected_output="""
            Une proc√©dure technique de mise en service avec des instructions pr√©cises √©tape par √©tape. 
            """,
            agent=commissionning_agent,
            async_execution=False,  # S'ex√©cute s√©quentiellement
        )
        # crew = Crew(
        #     agents=[agent_tech_lecture,redactor_agenttask],
        #     tasks=[agent_tech_lecturetask, redactor_agenttask],
        #     process=Process.sequential  # Ex√©cution s√©quentielle des t√¢ches
        # )
        crew = Crew(
            agents=[redactor_agent],
            tasks=[redactor_agenttask],
            process=Process.sequential  
        )
        part3 = "D√©tail de Mise en service"
        st.subheader(part3)
        result = crew.kickoff()
        st.write(result.raw)
        
        doc.Chapter(part3)
        doc.writeBlack(result.raw)
        
        
        if False:
            agent_verificateur = Agent(
                role="V√©rificateur Qualit√©",
                goal=f"""
                S'assurer que la proc√©dure est compl√®te et conforme aux normes de r√©daction technique : 
                {result.raw}
                """,
                verbose=True,
                memory=True,
                backstory="Sp√©cialiste dans la validation de proc√©dures techniques.",
                tools=[pdf_tool],
                llm = ChooseLLM()
                
            )
            agent_verificateurtask = Task(
                description="V√©rifier la qualit√© de la proc√©dure r√©dig√©e.",
                expected_output="Proc√©dure de mise en service compl√®te avec rapport de validation de conformit√© ou rapport de corrections.",
                agent=agent_verificateur,
            )
            
            crew = Crew(
                agents=[agent_verificateur],
                tasks=[agent_verificateurtask],
                process=Process.sequential  # Ex√©cution s√©quentielle des t√¢ches
            )
            
            part4 = "V√©rification"
            st.subheader(part4)
            result = crew.kickoff()
            st.write(result.raw)
            doc.Chapter(part4)
            doc.writeBlack(result.raw)
        # doc.saveDocument(os.path.join("uploads","analyse-fiche-technique.docx"))
        return doc




st.set_page_config(page_title="Analyse de fiche technique", page_icon="ü§ñ", layout="wide") 
init_session()
st.header("Mise en service")
uploaded_file_mes = st.file_uploader("Upload technical document", type="pdf")
if st.button("Analyse de la fiche technique"):
    
    # Streamlit file uploader for PDF
    
    if uploaded_file_mes :
        
        doc = do(uploaded_file_mes)
        doc.saveDocument(os.path.join("uploads","analyse-fiche-technique.docx"))
    
